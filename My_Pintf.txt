     1                                      global _start
     2                                  
     3                                  ;-----------------------------------------------------------------------------------------------
     4                                  
     5                                      section .data
     6                                  
     7                                      BUFFER_SIZE      equ 128
     8 00000000 000000000000000000-         BUFFER:          db  BUFFER_SIZE dup (0)
     8 00000009 000000000000000000-
     8 00000012 000000000000000000-
     8 0000001B 000000000000000000-
     8 00000024 000000000000000000-
     8 0000002D 000000000000000000-
     8 00000036 000000000000000000-
     8 0000003F 000000000000000000-
     8 00000048 000000000000000000-
     8 00000051 000000000000000000-
     8 0000005A 000000000000000000-
     8 00000063 000000000000000000-
     8 0000006C 000000000000000000-
     8 00000075 000000000000000000-
     8 0000007E 0000               
     9                                  
    10                                      INTERMDT_BUF_SZ  equ 64
    11 00000080 000000000000000000-         INTERMDT_BUF:    db  INTERMDT_BUF_SZ dup (0)
    11 00000089 000000000000000000-
    11 00000092 000000000000000000-
    11 0000009B 000000000000000000-
    11 000000A4 000000000000000000-
    11 000000AD 000000000000000000-
    11 000000B6 000000000000000000-
    11 000000BF 00                 
    12                                  
    13 000000C0 48656C6C6F21204920-         ENTRY:           db  'Hello! I am %d years old'
    13 000000C9 616D20256420796561-
    13 000000D2 7273206F6C64       
    14                                  
    15 000000D8 25                          VARGS_B:         db  '%'
    16                                      LEN_OF_ADDR_PTR: equ 8
    17                                  
    18 000000D9 01                          BINARY_MASK:     db  1
    19 000000DA 08                          OCTAL_MASK:      db  8
    20 000000DB 10                          HEX_MASK:        db  16
    21                                  
    22 000000DC 0808080808080808            SWAP_BUF:        db  8 Dup (8)
    23                                  
    24 000000E4 303132333435363738-         ALPHABET:        db  '0123456789ABCDEF'
    24 000000ED 39414243444546     
    25                                      
    26                                      HEX_SHIFT        equ 4
    27                                      OCT_SHIFT        equ 3
    28                                      BIN_SHIFT        equ 1
    29                                  
    30                                      END_OF_STR       equ '\0'
    31                                  
    32 000000F4 596F75207075742077-         ERROR_MSG:       db 'You put wrong char after %, end of program...'
    32 000000FD 726F6E672063686172-
    32 00000106 20616674657220252C-
    32 0000010F 20656E64206F662070-
    32 00000118 726F6772616D2E2E2E 
    33                                  
    34                                      MOV_TO_NEXT_VAR  equ 8
    35                                  
    36                                  ;-----------------------------------------------------------------------------------------------
    37                                  
    38                                  ;-----------------------------------------------------------------------------------------------
    39                                      section .text
    40                                  
    41                                  ;=========================================================== MACROS ============================
    42                                  
    43                                  %macro printInCmd 1
    44                                  
    45                                      mov rax, 1
    46                                  
    47                                      mov rdi, 1
    48                                  
    49                                      mov rsi, %1
    50                                  
    51                                      syscall
    52                                  
    53                                  %endmacro
    54                                  
    55                                  ;========================================================= START CODE ==========================
    56                                  
    57                                  _start:
    58 00000000 50                          push rax
    59 00000001 51                          push rcx
    60 00000002 52                          push rdx
    61 00000003 4153                        push r11
    62                                  
    63 00000005 E811000000                  call Printf
    64                                  
    65 0000000A 415B                        pop r11
    66 0000000C 58                          pop rax
    67 0000000D 59                          pop rcx
    68 0000000E 5A                          pop rdx
    69                                  
    70 0000000F B801000000                  mov rax, 1
    71 00000014 BB00000000                  mov rbx, 0
    72                                  
    73 00000019 CD80                        int 0x80
    74                                  
    75                                  ;===============================================================================================
    76                                  ;-----------------------------------------------------------------------------------------------
    77                                  ;                                                           PRINTF
    78                                  ;arg1       String with text
    79                                  ;vargs      ...
    80                                  ;
    81                                  ;INFO:      RDX - reserved to variable`s address
    82                                  ;           RCX - reserved to count quantity of chars into intermediate buffer
    83                                  ;           RDI - reserved to buffer address
    84                                  ;           RSI - reserved to input data
    85                                  ;           R15 - reserved to char`s counter
    86                                  ;           
    87                                  ;===============================================================================================
    88                                  
    89                                  ;QUESTIONS?
    90                                  ;
    91                                  ;1) How we get address of user`s string?
    92                                  ;
    93                                  ;2) Do we need to save all registers, without rax, rcx, rdx? 
    94                                  
    95                                  Printf:
    96                                  
    97                                  ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    98 0000001B 415C                        pop r12                     ; save ret address
    99                                  
   100 0000001D 5E                          pop rsi                     ; get user`s text address
   101                                  
   102 0000001E 4889E2                      mov rdx, rsp                ; get first variable`s address
   103                                  
   104 00000021 488D3C25[00000000]          lea rdi, BUFFER             ; get buffer`s address
   105                                  
   106 00000029 4154                        push r12                    ; save the ret address
   107                                  
   108 0000002B 4D31FF                      xor r15, r15
   109                                  
   110                                  .readInputData:
   111                                          
   112 0000002E E80F000000                  call Switch
   113                                  
   114 00000033 803E5C                      cmp byte [rsi], byte END_OF_STR
   114          ******************       warning: byte data exceeds bounds [-w+number-overflow]
   115                                  
   116 00000036 75F6                        jne .readInputData
   117                                  ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
   118                                  
   119 00000038 E805020000                  call OutputBuffer
   120                                  
   121 0000003D 5B                          pop rbx                     ; get the ret address
   122                                   
   123 0000003E 52                          push rdx                    ; we get the difference between the current stack address and 
   124 0000003F 5C                          pop rsp                     ; the address when calling the function
   125                                  
   126 00000040 53                          push rbx                    ; put the ret address
   127                                  
   128 00000041 C3                          ret
   129                                  
   130                                  ;===============================================================================================
   131                                  ;-----------------------------------------------------------------------------------------------
   132                                  ;                                                           SWITCH
   133                                  ;Entry:     RSI - address in user`s data            This func switch between
   134                                  ;           RDI - address in buffer             special symbols in user`s string
   135                                  ;           RDX - address of last var
   136                                  ;Retrn:    
   137                                  ;Destr:     RBX
   138                                  ;===============================================================================================
   139                                  
   140                                  Switch:
   141                                  
   142 00000042 803E25                      cmp byte [rsi], byte '%'
   143 00000045 0F8507010000                jne .justLetter
   144                                  
   145 0000004B 48FFC6                      inc rsi
   146                                  
   147 0000004E 803E25                      cmp byte [rsi], byte '%'
   148 00000051 0F84FB000000                je .justLetter
   149                                  
   150 00000057 4831DB                      xor rbx, rbx
   151 0000005A 8A1E                        mov bl, byte [rsi]
   152                                  
   153 0000005C 4C8B24DD[57FDFFFF]          mov r12, .jmpTable[(rbx - 'b') * 8]
   154                                  
   155 00000064 41FFE4                      jmp r12
   156                                  
   157                                  ;===========================================================JMP TABLE START=====================
   158                                  .jmpTable:
   159 00000067 [F700000000000000]                                  dq .binary
   160 0000006F [0E01000000000000]                                  dq .char
   161 00000077 [1601000000000000]                                  dq .decimal
   162 0000007F [5201000000000000]-         times ('h' - 'd' - 1)   dq .error
   162 0000007F <rep 3h>           
   163 00000097 [1D01000000000000]                                  dq .hexadecimal,
   164 0000009F [5201000000000000]-         times ('o' - 'h' - 1)   dq .error
   164 0000009F <rep 6h>           
   165 000000CF [3401000000000000]                                  dq .octal,
   166 000000D7 [5201000000000000]-         times ('s' - 'o' - 1)   dq .error
   166 000000D7 <rep 3h>           
   167 000000EF [4B01000000000000]                                  dq .string
   168                                  
   169                                  ;===========================================================JMP TABLE END=======================
   170                                  
   171                                  .binary:
   172                                  
   173 000000F7 49BC-                       mov r12, BINARY_MASK
   173 000000F9 [D900000000000000] 
   174 00000101 41BD01000000                mov r13, BIN_SHIFT
   175                                  
   176 00000107 E852000000                  call ConverterSysMltplsTwo
   177                                  
   178 0000010C EB4F                        jmp .funcRet
   179                                  
   180                                  .char:
   181                                  
   182 0000010E 49FFC7                      inc r15
   183                                  
   184 00000111 8A02                        mov al, byte [rdx]
   185 00000113 AA                          stosb
   186                                  
   187 00000114 EB47                        jmp .funcRet
   188                                  
   189                                  .decimal:
   190                                  
   191 00000116 E881000000                  call ConvertDecimal
   192                                  
   193 0000011B EB40                        jmp .funcRet
   194                                  
   195                                  .hexadecimal:
   196                                  
   197 0000011D 49BC-                       mov r12, HEX_MASK
   197 0000011F [DB00000000000000] 
   198 00000127 41BD04000000                mov r13, HEX_SHIFT
   199                                  
   200 0000012D E82C000000                  call ConverterSysMltplsTwo
   201                                  
   202 00000132 EB29                        jmp .funcRet
   203                                  
   204                                  .octal:
   205                                      
   206 00000134 49BC-                       mov r12, OCTAL_MASK
   206 00000136 [DA00000000000000] 
   207 0000013E 41BD03000000                mov r13, OCT_SHIFT
   208                                  
   209 00000144 E815000000                  call ConverterSysMltplsTwo
   210                                  
   211 00000149 EB12                        jmp .funcRet
   212                                  
   213                                  .string:
   214                                  
   215 0000014B E8CB000000                  call PutString
   216                                  
   217 00000150 EB0B                        jmp .funcRet
   218                                  
   219                                  .error:
   220                                  
   221                                      ;;\td
   222                                  
   223                                  .justLetter:
   224                                  
   225 00000152 49FFC7                      inc r15
   226                                  
   227 00000155 8A06                        mov al, byte [rsi]
   228 00000157 AA                          stosb
   229 00000158 48FFC6                      inc rsi
   230                                  
   231 0000015B EB00                        jmp .funcRet
   232                                  
   233                                  .funcRet:
   234                                  
   235 0000015D C3                          ret
   236                                  
   237                                  ;I*********************************************************************************************I
   238                                  ;I                                       I             I                                       I
   239                                  ;I======================================= CONVERTATIONS =======================================I
   240                                  ;I                                       I             I                                       I
   241                                  ;I*********************************************************************************************I
   242                                  
   243                                  ;===============================================================================================;
   244                                  ;-----------------------------------------------------------------------------------------------;
   245                                  ;                                                 CONVERTER_SYS_MLTPLS_TWO                      ;
   246                                  ;Entry:     RDI - address in buffer             Put user`s multyples two num                    ;
   247                                  ;           R12 - MASK                                 into buffer                              ;
   248                                  ;           R13 - SHIFT                                                                         ;
   249                                  ;Retrn:     none                                                                                ;
   250                                  ;Destr:     RAX, RBX, RSI, RCX                                                                  ;
   251                                  ;===============================================================================================;
   252                                  
   253                                  ConverterSysMltplsTwo:
   254                                  
   255 0000015E 488B02                      mov rax, [rdx]              ; put var in rax
   256 00000161 4883EA08                    sub rdx, MOV_TO_NEXT_VAR
   257                                  
   258 00000165 56                          push rsi                    ; save rsi
   259                                  
   260 00000166 4831C9                      xor rcx, rcx                ; reset to zero intermediate buffer counter
   261                                  
   262 00000169 4889FE                      mov rsi, rdi                ; | > prepare for movsb & PutInBuf
   263 0000016C 488D3C25[80000000]          lea rdi, INTERMDT_BUF       ; |/
   264                                  
   265 00000174 488D1C25[E4000000]          lea rbx, ALPHABET           ; for shift
   266                                  
   267                                  .loop:
   268                                  
   269 0000017C 48FFC1                      inc rcx
   270                                  
   271 0000017F 4889C6                      mov rsi, rax
   272                                  
   273 00000182 4821CE                      and rsi, rcx
   274 00000185 48D3E8                      shr rax, cl
   275                                  
   276 00000188 4801DE                      add rsi, rbx
   277                                  
   278 0000018B A4                          movsb
   279                                  
   280 0000018C 4883F800                    cmp rax, 0
   281                                  
   282 00000190 75EA                        jne .loop
   283                                  
   284 00000192 E852000000                  call PutInBuf
   285                                  
   286 00000197 4889F7                      mov rdi, rsi
   287 0000019A 5E                          pop rsi
   288                                  
   289 0000019B C3                          ret
   290                                  
   291                                  ;===============================================================================================
   292                                  ;-----------------------------------------------------------------------------------------------
   293                                  ;                                                           DECIMAL
   294                                  ;Entry:     RAX - numbet                            Put user`s decimal num
   295                                  ;           RDI - address in buffer                      into buffer
   296                                  ;Retrn:
   297                                  ;Destr:     
   298                                  ;===============================================================================================
   299                                  
   300                                  ConvertDecimal:
   301                                      
   302 0000019C 488B02                      mov rax, [rdx]
   303 0000019F 4883EA08                    sub rdx, MOV_TO_NEXT_VAR
   304                                  
   305 000001A3 52                          push rdx
   306                                  
   307 000001A4 56                          push rsi
   308                                  
   309 000001A5 4831C9                      xor rcx, rcx
   310                                  
   311 000001A8 4889FE                      mov rsi, rdi
   312 000001AB 488D3C25[80000000]          lea rdi, INTERMDT_BUF
   313                                  
   314 000001B3 41BE0A000000                mov r14, 10
   315                                  
   316 000001B9 4883F800                    cmp rax, 0
   317                                  
   318 000001BD 7709                        ja .loop
   319                                  
   320 000001BF 48FFC1                      inc rcx
   321                                  
   322 000001C2 C6072D                      mov byte [rdi], byte '-'
   323 000001C5 48F7D8                      neg rax
   324                                  
   325                                  .loop:
   326                                  
   327 000001C8 48FFC1                      inc rcx
   328                                  
   329 000001CB 49F7F6                      div r14
   330                                  
   331 000001CE BB30000000                  mov rbx, '0'
   332 000001D3 4801D3                      add rbx, rdx
   333                                  
   334 000001D6 8817                        mov byte [rdi], dl
   335                                  
   336 000001D8 4883F800                    cmp rax, 0
   337                                  
   338 000001DC 75EA                        jne .loop
   339                                  
   340 000001DE E806000000                  call PutInBuf
   341                                  
   342 000001E3 4889F7                      mov rdi, rsi
   343 000001E6 5E                          pop rsi
   344                                  
   345 000001E7 5A                          pop rdx
   346                                  
   347 000001E8 C3                          ret
   348                                  
   349                                  ;I*********************************************************************************************I
   350                                  ;I                                      I              I                                       I
   351                                  ;I=================================== END OF CONVERTATIONS ====================================I
   352                                  ;I                                      I              I                                       I
   353                                  ;I*********************************************************************************************I
   354                                  
   355                                  ;===============================================================================================
   356                                  ;-----------------------------------------------------------------------------------------------
   357                                  ;                                                            PUT_IN_BUF
   358                                  ;Entry:     RDI - address of buffer                 Put user`s string into buffer
   359                                  ;           RSI - address of last char in 
   360                                  ;                 intermadiate buffer
   361                                  ;           
   362                                  ;Retrn:
   363                                  ;Destr:     RCX
   364                                  ;===============================================================================================
   365                                  
   366                                  PutInBuf:
   367                                  
   368 000001E9 52                          push rdx
   369 000001EA 4801CA                      add rdx, rcx
   370                                  
   371 000001ED 4881FA80000000              cmp rdx, BUFFER_SIZE
   372                                  
   373 000001F4 5A                          pop rdx
   374                                  
   375 000001F5 7205                        jb .loop
   376                                  
   377 000001F7 E846000000                  call OutputBuffer
   378                                  
   379                                  .loop:
   380                                  
   381 000001FC A4                          movsb
   382 000001FD 48FFCE                      dec rsi
   383 00000200 48FFCE                      dec rsi
   384                                  
   385 00000203 E2F7                        loop .loop
   386                                  
   387 00000205 C3                          ret
   388                                  
   389                                  ;===============================================================================================
   390                                  ;-----------------------------------------------------------------------------------------------
   391                                  ;                                                              STRLEN
   392                                  ;Entry:     RDI - address of input string           Put user`s string into buffer
   393                                  ;Retrn:     RAX - lenght of string
   394                                  ;Destr:     RAX, RCX, RDI
   395                                  ;===============================================================================================
   396                                  
   397                                  Strlen:
   398                                  
   399 00000206 488B32                      mov rsi, [rdx]
   400                                  
   401 00000209 4831C9                      xor rcx, rcx
   402 0000020C 48FFC9                      dec rcx
   403                                  
   404 0000020F B05C                        mov al, END_OF_STR
   404          ******************       warning: byte data exceeds bounds [-w+number-overflow]
   405                                  
   406                                  .loop:
   407                                  
   408 00000211 48FFC1                      inc rcx
   409                                  
   410 00000214 AE                          scasb
   411                                  
   412 00000215 75FA                        jne .loop
   413                                  
   414 00000217 4889C8                      mov rax, rcx
   415                                  
   416 0000021A C3                          ret
   417                                  
   418                                  ;===============================================================================================
   419                                  ;-----------------------------------------------------------------------------------------------
   420                                  ;                                                            PUT_STRING
   421                                  ;Entry:     RSI - address of input strin            Put user`s string into buffer
   422                                  ;                      
   423                                  ;Retrn:
   424                                  ;Destr:
   425                                  ;===============================================================================================
   426                                  
   427                                  PutString:
   428                                  
   429 0000021B 56                          push rsi
   430                                  
   431 0000021C 488B3A                      mov rdi, [rdx]
   432 0000021F 4883EA08                    sub rdx, MOV_TO_NEXT_VAR
   433                                  
   434 00000223 E8DEFFFFFF                  call Strlen
   435                                  
   436 00000228 5E                          pop rsi
   437                                  
   438 00000229 BB80000000                  mov rbx, BUFFER_SIZE
   439 0000022E 4C29FB                      sub rbx, r15
   440                                  
   441 00000231 4839D8                      cmp rax, rbx
   442                                  
   443 00000234 7205                        jb .loop
   444                                  
   445 00000236 E807000000                  call OutputBuffer
   446                                  
   447                                  .loop:
   448                                  
   449 0000023B A4                          movsb
   450                                  
   451 0000023C 803E5C                      cmp byte [rsi], byte END_OF_STR
   451          ******************       warning: byte data exceeds bounds [-w+number-overflow]
   452                                  
   453 0000023F 75FA                        jne .loop
   454                                  
   455 00000241 C3                          ret
   456                                  
   457                                  ;===============================================================================================
   458                                  ;-----------------------------------------------------------------------------------------------
   459                                  ;                                                          OUTPUT_BUFFER
   460                                  ;Entry:     RDI - address in buffer                 Put user`s string into buffer
   461                                  ;Retrn:     RDI - buffer address
   462                                  ;Destr:     RAX, RSI, RDI
   463                                  ;===============================================================================================
   464                                  
   465                                  OutputBuffer:
   466                                  
   467                                  ;=-=-=-=-= Macro -=-=-=-=
   468                                  ;DESTR: RSI, RDI, RAX
   469                                  
   470                                      printInCmd rdi
    44                              <1> 
    45 00000242 B801000000          <1>  mov rax, 1
    46                              <1> 
    47 00000247 BF01000000          <1>  mov rdi, 1
    48                              <1> 
    49 0000024C 4889FE              <1>  mov rsi, %1
    50                              <1> 
    51 0000024F 0F05                <1>  syscall
    52                              <1> 
   471                                  ;-=-=-=-=-=-=-=-=-=-=-=-=
   472                                  
   473 00000251 488D3C25[00000000]          lea rdi, BUFFER
   474 00000259 41BF00000000                mov r15, 0
   475                                  
   476 0000025F C3                          ret
