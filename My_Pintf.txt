     1                                      global _start
     2                                  
     3                                  ;-----------------------------------------------------------------------------------------------
     4                                  
     5                                      section .data
     6                                  
     7                                      BUFFER_SIZE      equ 128
     8 00000000 000000000000000000-         BUFFER:          db  BUFFER_SIZE dup (0)
     8 00000009 000000000000000000-
     8 00000012 000000000000000000-
     8 0000001B 000000000000000000-
     8 00000024 000000000000000000-
     8 0000002D 000000000000000000-
     8 00000036 000000000000000000-
     8 0000003F 000000000000000000-
     8 00000048 000000000000000000-
     8 00000051 000000000000000000-
     8 0000005A 000000000000000000-
     8 00000063 000000000000000000-
     8 0000006C 000000000000000000-
     8 00000075 000000000000000000-
     8 0000007E 0000               
     9                                  
    10                                      INTERMDT_BUF_SZ  equ 64
    11 00000080 000000000000000000-         INTERMDT_BUF:    db  INTERMDT_BUF_SZ dup (0)
    11 00000089 000000000000000000-
    11 00000092 000000000000000000-
    11 0000009B 000000000000000000-
    11 000000A4 000000000000000000-
    11 000000AD 000000000000000000-
    11 000000B6 000000000000000000-
    11 000000BF 00                 
    12                                  
    13 000000C0 48656C6C6F21204920-         ENTRY:           db  'Hello! I am %% years old'
    13 000000C9 616D20252520796561-
    13 000000D2 7273206F6C64       
    14                                  
    15 000000D8 25                          VARGS_B:         db  '%'
    16                                      LEN_OF_ADDR_PTR: equ 8
    17                                  
    18 000000D9 01                          BINARY_MASK:     db  1
    19 000000DA 08                          OCTAL_MASK:      db  8
    20 000000DB 10                          HEX_MASK:        db  16
    21                                  
    22 000000DC 303132333435363738-         ALPHABET:        db  '0123456789ABCDEF'
    22 000000E5 39414243444546     
    23                                      
    24                                      HEX_SHIFT        equ 4
    25                                      OCT_SHIFT        equ 3
    26                                      BIN_SHIFT        equ 1
    27                                  
    28                                      END_OF_STR       equ '\0'
    29                                  
    30 000000EC 596F75207075742077-         ERROR_MSG:       db 'You put wrong char after %, end of program...'
    30 000000F5 726F6E672063686172-
    30 000000FE 20616674657220252C-
    30 00000107 20656E64206F662070-
    30 00000110 726F6772616D2E2E2E 
    31                                  
    32                                      MOV_TO_NEXT_VAR  equ 8
    33                                  
    34                                  ;-----------------------------------------------------------------------------------------------
    35                                  
    36                                  ;-----------------------------------------------------------------------------------------------
    37                                      section .text
    38                                  
    39                                  ;=========================================================== MACROS ============================
    40                                  
    41                                  %macro printInCmd 1
    42                                  
    43                                      mov rax, 1
    44                                  
    45                                      mov rdi, 1
    46                                  
    47                                      mov rsi, %1
    48                                  
    49                                      syscall
    50                                  
    51                                  %endmacro
    52                                  
    53                                  ;========================================================= START CODE ==========================
    54                                  
    55                                  _start:
    56                                      
    57 00000000 488D0425[C0000000]          lea rax, ENTRY
    58                                  
    59 00000008 50                          push rax
    60                                  
    61 00000009 E80C000000                  call Printf
    62                                  
    63 0000000E B801000000                  mov rax, 1
    64 00000013 BB00000000                  mov rbx, 0
    65                                  
    66 00000018 CD80                        int 0x80
    67                                  
    68                                  ;===============================================================================================
    69                                  ;-----------------------------------------------------------------------------------------------
    70                                  ;                                                           PRINTF
    71                                  ;arg1       String with text
    72                                  ;vargs      ...
    73                                  ;
    74                                  ;INFO:      RDX - reserved to variable`s address
    75                                  ;           RCX - reserved to count quantity of chars into intermediate buffer
    76                                  ;           RDI - reserved to buffer address
    77                                  ;           RSI - reserved to input data
    78                                  ;           R15 - reserved to char`s counter
    79                                  ;           
    80                                  ;Destr:     RAX, RBX, RCX, RDX, RDI, RSI, R12, R13, R14, R15
    81                                  ;===============================================================================================
    82                                  
    83                                  Printf:
    84                                  
    85                                  ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    86 0000001A 415C                        pop r12                     ; save ret address
    87                                  
    88 0000001C 5E                          pop rsi                     ; get user`s text address
    89                                  
    90 0000001D 4889E2                      mov rdx, rsp                ; get first variable`s address
    91                                  
    92 00000020 488D3C25[00000000]          lea rdi, BUFFER             ; get buffer`s address
    93                                  
    94 00000028 4154                        push r12                    ; save the ret address
    95                                  
    96 0000002A 4D31FF                      xor r15, r15
    97                                  
    98                                  .readInputData:
    99                                          
   100 0000002D E80F000000                  call Switch
   101                                  
   102 00000032 803E5C                      cmp byte [rsi], byte END_OF_STR
   102          ******************       warning: byte data exceeds bounds [-w+number-overflow]
   103                                  
   104 00000035 75F6                        jne .readInputData
   105                                  ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
   106                                  
   107 00000037 E805020000                  call OutputBuffer
   108                                  
   109 0000003C 5B                          pop rbx                     ; get the ret address
   110                                   
   111 0000003D 52                          push rdx                    ; we get the difference between the current stack address and 
   112 0000003E 5C                          pop rsp                     ; the address when calling the function
   113                                  
   114 0000003F 53                          push rbx                    ; put the ret address
   115                                  
   116 00000040 C3                          ret
   117                                  
   118                                  ;===============================================================================================
   119                                  ;-----------------------------------------------------------------------------------------------
   120                                  ;                                                           SWITCH
   121                                  ;Entry:     RSI - address in user`s data            This func switch between
   122                                  ;           RDI - address in buffer             special symbols in user`s string
   123                                  ;           RDX - address of last var
   124                                  ;Retrn:    
   125                                  ;Destr:     RAX, RBX, RCX, RDX, RDI, RSI, R12, R13, R14
   126                                  ;===============================================================================================
   127                                  
   128                                  Switch:
   129                                  
   130 00000041 803E25                      cmp byte [rsi], byte '%'
   131 00000044 0F8507010000                jne .justLetter
   132                                  
   133 0000004A 48FFC6                      inc rsi
   134                                  
   135 0000004D 803E25                      cmp byte [rsi], byte '%'
   136 00000050 0F84FB000000                je .justLetter
   137                                  
   138 00000056 4831DB                      xor rbx, rbx
   139 00000059 8A1E                        mov bl, byte [rsi]
   140                                  
   141 0000005B 4C8B24DD[56FDFFFF]          mov r12, .jmpTable[(rbx - 'b') * 8]
   142                                  
   143 00000063 41FFE4                      jmp r12
   144                                  
   145                                  ;===========================================================JMP TABLE START=====================
   146                                  .jmpTable:
   147 00000066 [F600000000000000]                                  dq .binary
   148 0000006E [0D01000000000000]                                  dq .char
   149 00000076 [1501000000000000]                                  dq .decimal
   150 0000007E [5101000000000000]-         times ('h' - 'd' - 1)   dq .error
   150 0000007E <rep 3h>           
   151 00000096 [1C01000000000000]                                  dq .hexadecimal,
   152 0000009E [5101000000000000]-         times ('o' - 'h' - 1)   dq .error
   152 0000009E <rep 6h>           
   153 000000CE [3301000000000000]                                  dq .octal,
   154 000000D6 [5101000000000000]-         times ('s' - 'o' - 1)   dq .error
   154 000000D6 <rep 3h>           
   155 000000EE [4A01000000000000]                                  dq .string
   156                                  
   157                                  ;===========================================================JMP TABLE END=======================
   158                                  
   159                                  .binary:
   160                                  
   161 000000F6 49BC-                       mov r12, BINARY_MASK
   161 000000F8 [D900000000000000] 
   162 00000100 41BD01000000                mov r13, BIN_SHIFT
   163                                  
   164 00000106 E852000000                  call ConverterSysMltplsTwo
   165                                  
   166 0000010B EB4F                        jmp .funcRet
   167                                  
   168                                  .char:
   169                                  
   170 0000010D 49FFC7                      inc r15
   171                                  
   172 00000110 8A02                        mov al, byte [rdx]
   173 00000112 AA                          stosb
   174                                  
   175 00000113 EB47                        jmp .funcRet
   176                                  
   177                                  .decimal:
   178                                  
   179 00000115 E881000000                  call ConvertDecimal
   180                                  
   181 0000011A EB40                        jmp .funcRet
   182                                  
   183                                  .hexadecimal:
   184                                  
   185 0000011C 49BC-                       mov r12, HEX_MASK
   185 0000011E [DB00000000000000] 
   186 00000126 41BD04000000                mov r13, HEX_SHIFT
   187                                  
   188 0000012C E82C000000                  call ConverterSysMltplsTwo
   189                                  
   190 00000131 EB29                        jmp .funcRet
   191                                  
   192                                  .octal:
   193                                      
   194 00000133 49BC-                       mov r12, OCTAL_MASK
   194 00000135 [DA00000000000000] 
   195 0000013D 41BD03000000                mov r13, OCT_SHIFT
   196                                  
   197 00000143 E815000000                  call ConverterSysMltplsTwo
   198                                  
   199 00000148 EB12                        jmp .funcRet
   200                                  
   201                                  .string:
   202                                  
   203 0000014A E8CB000000                  call PutString
   204                                  
   205 0000014F EB0B                        jmp .funcRet
   206                                  
   207                                  .error:
   208                                  
   209                                      ;;\td
   210                                  
   211                                  .justLetter:
   212                                  
   213 00000151 49FFC7                      inc r15
   214                                  
   215 00000154 8A06                        mov al, byte [rsi]
   216 00000156 AA                          stosb
   217 00000157 48FFC6                      inc rsi
   218                                  
   219 0000015A EB00                        jmp .funcRet
   220                                  
   221                                  .funcRet:
   222                                  
   223 0000015C C3                          ret
   224                                  
   225                                  ;I*********************************************************************************************I
   226                                  ;I                                       I             I                                       I
   227                                  ;I======================================= CONVERTATIONS =======================================I
   228                                  ;I                                       I             I                                       I
   229                                  ;I*********************************************************************************************I
   230                                  
   231                                  ;===============================================================================================;
   232                                  ;-----------------------------------------------------------------------------------------------;
   233                                  ;                                                 CONVERTER_SYS_MLTPLS_TWO                      ;
   234                                  ;Entry:     RDI - address in buffer             Put user`s multyples two num                    ;
   235                                  ;           R12 - MASK                                 into buffer                              ;
   236                                  ;           R13 - SHIFT                                                                         ;
   237                                  ;Retrn:     none                                                                                ;
   238                                  ;Destr:     RAX, RBX, RCX, RSI                                                                  ;
   239                                  ;===============================================================================================;
   240                                  
   241                                  ConverterSysMltplsTwo:
   242                                  
   243 0000015D 488B02                      mov rax, [rdx]              ; put var in rax
   244 00000160 4883EA08                    sub rdx, MOV_TO_NEXT_VAR
   245                                  
   246 00000164 56                          push rsi                    ; save rsi
   247                                  
   248 00000165 4831C9                      xor rcx, rcx                ; reset to zero intermediate buffer counter
   249                                  
   250 00000168 4889FE                      mov rsi, rdi                ; | > prepare for movsb & PutInBuf
   251 0000016B 488D3C25[80000000]          lea rdi, INTERMDT_BUF       ; |/
   252                                  
   253 00000173 488D1C25[DC000000]          lea rbx, ALPHABET           ; for shift
   254                                  
   255                                  .loop:
   256                                  
   257 0000017B 48FFC1                      inc rcx
   258                                  
   259 0000017E 4889C6                      mov rsi, rax
   260                                  
   261 00000181 4821CE                      and rsi, rcx
   262 00000184 48D3E8                      shr rax, cl
   263                                  
   264 00000187 4801DE                      add rsi, rbx
   265                                  
   266 0000018A A4                          movsb
   267                                  
   268 0000018B 4883F800                    cmp rax, 0
   269                                  
   270 0000018F 75EA                        jne .loop
   271                                  
   272 00000191 E852000000                  call PutInBuf
   273                                  
   274 00000196 4889F7                      mov rdi, rsi
   275 00000199 5E                          pop rsi
   276                                  
   277 0000019A C3                          ret
   278                                  
   279                                  ;===============================================================================================
   280                                  ;-----------------------------------------------------------------------------------------------
   281                                  ;                                                           DECIMAL
   282                                  ;Entry:     RAX - numbet                            Put user`s decimal num
   283                                  ;           RDI - address in buffer                      into buffer
   284                                  ;Retrn:
   285                                  ;Destr:     
   286                                  ;===============================================================================================
   287                                  
   288                                  ConvertDecimal:
   289                                      
   290 0000019B 488B02                      mov rax, [rdx]
   291 0000019E 4883EA08                    sub rdx, MOV_TO_NEXT_VAR
   292                                  
   293 000001A2 52                          push rdx
   294                                  
   295 000001A3 56                          push rsi
   296                                  
   297 000001A4 4831C9                      xor rcx, rcx
   298                                  
   299 000001A7 4889FE                      mov rsi, rdi
   300 000001AA 488D3C25[80000000]          lea rdi, INTERMDT_BUF
   301                                  
   302 000001B2 41BE0A000000                mov r14, 10
   303                                  
   304 000001B8 4883F800                    cmp rax, 0
   305                                  
   306 000001BC 7709                        ja .loop
   307                                  
   308 000001BE 48FFC1                      inc rcx
   309                                  
   310 000001C1 C6072D                      mov byte [rdi], byte '-'
   311 000001C4 48F7D8                      neg rax
   312                                  
   313                                  .loop:
   314                                  
   315 000001C7 48FFC1                      inc rcx
   316                                  
   317 000001CA 49F7F6                      div r14
   318                                  
   319 000001CD BB30000000                  mov rbx, '0'
   320 000001D2 4801D3                      add rbx, rdx
   321                                  
   322 000001D5 8817                        mov byte [rdi], dl
   323                                  
   324 000001D7 4883F800                    cmp rax, 0
   325                                  
   326 000001DB 75EA                        jne .loop
   327                                  
   328 000001DD E806000000                  call PutInBuf
   329                                  
   330 000001E2 4889F7                      mov rdi, rsi
   331 000001E5 5E                          pop rsi
   332                                  
   333 000001E6 5A                          pop rdx
   334                                  
   335 000001E7 C3                          ret
   336                                  
   337                                  ;I*********************************************************************************************I
   338                                  ;I                                      I              I                                       I
   339                                  ;I=================================== END OF CONVERTATIONS ====================================I
   340                                  ;I                                      I              I                                       I
   341                                  ;I*********************************************************************************************I
   342                                  
   343                                  ;===============================================================================================
   344                                  ;-----------------------------------------------------------------------------------------------
   345                                  ;                                                            PUT_IN_BUF
   346                                  ;Entry:     RDI - address of buffer                 Put user`s string into buffer
   347                                  ;           RSI - address of last char in 
   348                                  ;                 intermadiate buffer
   349                                  ;           
   350                                  ;Retrn:
   351                                  ;Destr:     RCX
   352                                  ;===============================================================================================
   353                                  
   354                                  PutInBuf:
   355                                  
   356 000001E8 52                          push rdx
   357 000001E9 4801CA                      add rdx, rcx
   358                                  
   359 000001EC 4881FA80000000              cmp rdx, BUFFER_SIZE
   360                                  
   361 000001F3 5A                          pop rdx
   362                                  
   363 000001F4 7205                        jb .loop
   364                                  
   365 000001F6 E846000000                  call OutputBuffer
   366                                  
   367                                  .loop:
   368                                  
   369 000001FB A4                          movsb
   370 000001FC 48FFCE                      dec rsi
   371 000001FF 48FFCE                      dec rsi
   372                                  
   373 00000202 E2F7                        loop .loop
   374                                  
   375 00000204 C3                          ret
   376                                  
   377                                  ;===============================================================================================
   378                                  ;-----------------------------------------------------------------------------------------------
   379                                  ;                                                              STRLEN
   380                                  ;Entry:     RDI - address of input string           Put user`s string into buffer
   381                                  ;Retrn:     RAX - lenght of string
   382                                  ;Destr:     RAX, RCX, RDI
   383                                  ;===============================================================================================
   384                                  
   385                                  Strlen:
   386                                  
   387 00000205 488B32                      mov rsi, [rdx]
   388                                  
   389 00000208 4831C9                      xor rcx, rcx
   390 0000020B 48FFC9                      dec rcx
   391                                  
   392 0000020E B05C                        mov al, END_OF_STR
   392          ******************       warning: byte data exceeds bounds [-w+number-overflow]
   393                                  
   394                                  .loop:
   395                                  
   396 00000210 48FFC1                      inc rcx
   397                                  
   398 00000213 AE                          scasb
   399                                  
   400 00000214 75FA                        jne .loop
   401                                  
   402 00000216 4889C8                      mov rax, rcx
   403                                  
   404 00000219 C3                          ret
   405                                  
   406                                  ;===============================================================================================
   407                                  ;-----------------------------------------------------------------------------------------------
   408                                  ;                                                            PUT_STRING
   409                                  ;Entry:     RSI - address of input strin            Put user`s string into buffer
   410                                  ;                      
   411                                  ;Retrn:
   412                                  ;Destr:
   413                                  ;===============================================================================================
   414                                  
   415                                  PutString:
   416                                  
   417 0000021A 56                          push rsi
   418                                  
   419 0000021B 488B3A                      mov rdi, [rdx]
   420 0000021E 4883EA08                    sub rdx, MOV_TO_NEXT_VAR
   421                                  
   422 00000222 E8DEFFFFFF                  call Strlen
   423                                  
   424 00000227 5E                          pop rsi
   425                                  
   426 00000228 BB80000000                  mov rbx, BUFFER_SIZE
   427 0000022D 4C29FB                      sub rbx, r15
   428                                  
   429 00000230 4839D8                      cmp rax, rbx
   430                                  
   431 00000233 7205                        jb .loop
   432                                  
   433 00000235 E807000000                  call OutputBuffer
   434                                  
   435                                  .loop:
   436                                  
   437 0000023A A4                          movsb
   438                                  
   439 0000023B 803E5C                      cmp byte [rsi], byte END_OF_STR
   439          ******************       warning: byte data exceeds bounds [-w+number-overflow]
   440                                  
   441 0000023E 75FA                        jne .loop
   442                                  
   443 00000240 C3                          ret
   444                                  
   445                                  ;===============================================================================================
   446                                  ;-----------------------------------------------------------------------------------------------
   447                                  ;                                                          OUTPUT_BUFFER
   448                                  ;Entry:     RDI - address in buffer                 Put user`s string into buffer
   449                                  ;Retrn:     RDI - buffer address
   450                                  ;Destr:     RAX, RSI, RDI
   451                                  ;===============================================================================================
   452                                  
   453                                  OutputBuffer:
   454                                  
   455                                  ;=-=-=-=-= Macro -=-=-=-=
   456                                  ;DESTR: RSI, RDI, RAX
   457                                  
   458                                      printInCmd rdi
    42                              <1> 
    43 00000241 B801000000          <1>  mov rax, 1
    44                              <1> 
    45 00000246 BF01000000          <1>  mov rdi, 1
    46                              <1> 
    47 0000024B 4889FE              <1>  mov rsi, %1
    48                              <1> 
    49 0000024E 0F05                <1>  syscall
    50                              <1> 
   459                                  ;-=-=-=-=-=-=-=-=-=-=-=-=
   460                                  
   461 00000250 488D3C25[00000000]          lea rdi, BUFFER
   462 00000258 41BF00000000                mov r15, 0
   463                                  
   464 0000025E C3                          ret
