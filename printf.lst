     1                                      global MyPrintf
     2                                  
     3                                  ;-----------------------------------------------------------------------------------------------
     4                                  
     5                                      section .data
     6                                  
     7                                      BUFFER_SIZE      equ 8
     8 00000000 00<rep 8h>                  BUFFER:          times BUFFER_SIZE db 0
     9                                  
    10                                      INTERMDT_BUF_SZ  equ 64
    11 00000008 00<rep 40h>                 INTERMDT_BUF:    times INTERMDT_BUF_SZ db 0
    12                                  
    13 00000048 25                          VARGS_B:         db  '%'
    14                                      LEN_OF_ADDR_PTR  equ 8
    15                                  
    16                                      HEX_MASK         equ 15
    17                                      OCTAL_MASK       equ 7
    18                                      BINARY_MASK      equ 1
    19                                  
    20 00000049 303132333435363738-         ALPHABET:        db  '0123456789ABCDEF'
    20 00000052 39414243444546     
    21                                      
    22                                      HEX_SHIFT        equ 4
    23                                      OCT_SHIFT        equ 3
    24                                      BIN_SHIFT        equ 1
    25                                  
    26                                      END_OF_STR       equ 0d
    27                                  
    28                                      IS_NUM_NEG       equ 8000000h
    29                                      NEG_MASK         equ 0FFFFFFFFh
    30                                  
    31 00000059 596F75207075742077-         ERROR_MSG:       db 'You put wrong char after %, end of program...'
    31 00000062 726F6E672063686172-
    31 0000006B 20616674657220252C-
    31 00000074 20656E64206F662070-
    31 0000007D 726F6772616D2E2E2E 
    32                                      ERROR_MSG_SIZE   equ $ - ERROR_MSG
    33                                  
    34                                      MOV_TO_NEXT_VAR  equ 8
    35                                  
    36                                  ;-----------------------------------------------------------------------------------------------
    37                                  
    38                                  ;-----------------------------------------------------------------------------------------------
    39                                      section .text
    40                                  
    41                                  ;// TD Replace Intermadiate buf -> stack
    42                                  
    43                                  ;=========================================================== MACROS ============================
    44                                  
    45                                  %macro PUT_CHAR_INTO_BUFFER 1
    46                                  
    47                                                  call CheckBuffer     
    48                                  
    49                                                  mov al, %1
    50                                                  stosb
    51                                  
    52                                                  inc r15                  
    53                                  %endmacro
    54                                  
    55                                  ;========================================================= START CODE ==========================
    56                                  
    57                                  ;===============================================================================================
    58                                  ;-----------------------------------------------------------------------------------------------
    59                                  ;                                                           PRINTF
    60                                  ;arg1       String with text
    61                                  ;vargs      ...
    62                                  ;
    63                                  ;INFO:      RDX - reserved to variable`s address
    64                                  ;           RCX - reserved to count quantity of chars into intermediate buffer
    65                                  ;           RDI - reserved to buffer address
    66                                  ;           RSI - reserved to input data
    67                                  ;           R15 - reserved to char`s counter
    68                                  ;           
    69                                  ;Destr:     RAX, RBX, RCX, RDX, RDI, RSI, R12, R13, R14, R15
    70                                  ;===============================================================================================
    71                                  
    72                                  MyPrintf:
    73                                  
    74                                  ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- Springboard -=-=-=-=-=-=-=-=-=-=
    75 00000000 415C                        pop r12                         ; save ret address
    76 00000002 4889E2                      mov rdx, rsp
    77                                  
    78 00000005 4151                        push r9
    79 00000007 4150                        push r8
    80 00000009 51                          push rcx
    81 0000000A 52                          push rdx
    82 0000000B 56                          push rsi
    83                                  
    84 0000000C 52                          push rdx
    85 0000000D 4154                        push r12                        ; save the ret address
    86                                  
    87 0000000F 4889FE                      mov rsi, rdi
    88 00000012 488D3C25[00000000]          lea rdi, BUFFER
    89                                  
    90 0000001A 4889E2                      mov rdx, rsp                    ; get first variable`s address
    91 0000001D 4883C210                    add rdx, MOV_TO_NEXT_VAR * 2
    92                                  ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    93                                  
    94 00000021 4D31FF                      xor r15, r15
    95                                  
    96                                  .readInputData:
    97                                          
    98 00000024 E80E000000                  call Switch
    99                                  
   100 00000029 803E00                      cmp byte [rsi], byte END_OF_STR
   101                                  
   102 0000002C 75F6                        jne .readInputData
   103                                  ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
   104                                  
   105 0000002E E85E020000                  call OutputBuffer
   106                                  
   107 00000033 5B                          pop rbx                     ; get the ret address
   108                                      
   109 00000034 5C                          pop rsp                     ; the address when calling the function
   110                                  
   111 00000035 53                          push rbx                    ; put the ret address
   112                                  
   113 00000036 C3                          ret
   114                                  
   115                                  ;===============================================================================================
   116                                  ;-----------------------------------------------------------------------------------------------
   117                                  ;                                                           SWITCH
   118                                  ;           RDX - address of last var                Switch to needed func
   119                                  ;Retrn:    
   120                                  ;Destr:     RAX, RBX, RCX, RDX, RDI, RSI, R12, R13, R14
   121                                  ;===============================================================================================
   122                                  
   123                                  Switch:
   124                                  
   125 00000037 803E25                      cmp byte [rsi], byte "%"
   126 0000003A 0F8554010000                jne .justLetter
   127                                  
   128 00000040 48FFC6                      inc rsi
   129                                  
   130 00000043 803E25                      cmp byte [rsi], byte "%"
   131 00000046 0F8448010000                je .justLetter
   132                                  
   133 0000004C 4831DB                      xor rbx, rbx
   134 0000004F 8A1E                        mov bl, byte [rsi]
   135                                  
   136 00000051 48FFC6                      inc rsi
   137                                  
   138 00000054 80FB62                      cmp bl, byte 'b'
   139 00000057 0F8220010000                jb .error
   140                                  
   141 0000005D 80FB78                      cmp bl, byte 'x'
   142 00000060 0F8717010000                ja .error
   143                                  
   144 00000066 FF24DD[5DFDFFFF]            jmp .jmpTable[(rbx - 'b') * 8]
   145                                  
   146                                  ;===========================================================JMP TABLE START=====================
   147                                  .jmpTable:
   148 0000006D [2501000000000000]                                  dq .binary
   149 00000075 [3801000000000000]                                  dq .char
   150 0000007D [4901000000000000]                                  dq .decimal
   151 00000085 [7D01000000000000]-         times ('o' - 'd' - 1)   dq .error
   151 00000085 <rep Ah>           
   152 000000D5 [6301000000000000]                                  dq .octal
   153 000000DD [7D01000000000000]-         times ('s' - 'o' - 1)   dq .error
   153 000000DD <rep 3h>           
   154 000000F5 [7601000000000000]                                  dq .string
   155 000000FD [7D01000000000000]-         times ('x' - 's' - 1)   dq .error
   155 000000FD <rep 4h>           
   156 0000011D [5001000000000000]                                  dq .hexadecimal
   157                                  
   158                                  ;===========================================================JMP TABLE END=======================
   159                                  
   160                                  .binary:
   161                                  
   162 00000125 41BC01000000                mov r12, BINARY_MASK
   163 0000012B 41BD01000000                mov r13, BIN_SHIFT
   164                                  
   165 00000131 E879000000                  call ConverterSysMltplsTwo
   166                                  
   167 00000136 EB6A                        jmp .funcRet
   168                                  
   169                                  .char:
   170                                  
   171                                      PUT_CHAR_INTO_BUFFER byte [rdx]
    46                              <1> 
    47 00000138 E866000000          <1>  call CheckBuffer
    48                              <1> 
    49 0000013D 8A02                <1>  mov al, %1
    50 0000013F AA                  <1>  stosb
    51                              <1> 
    52 00000140 49FFC7              <1>  inc r15
   172                                  
   173 00000143 4883C208                    add rdx, MOV_TO_NEXT_VAR
   174                                  
   175 00000147 EB59                        jmp .funcRet
   176                                  
   177                                  .decimal:
   178                                  
   179 00000149 E8AD000000                  call ConvertDecimal
   180                                  
   181 0000014E EB52                        jmp .funcRet
   182                                  
   183                                  .hexadecimal:
   184                                  
   185 00000150 41BC0F000000                mov r12, HEX_MASK
   186 00000156 41BD04000000                mov r13, HEX_SHIFT
   187                                  
   188 0000015C E84E000000                  call ConverterSysMltplsTwo
   189                                  
   190 00000161 EB3F                        jmp .funcRet
   191                                  
   192                                  .octal:
   193                                      
   194 00000163 41BC07000000                mov r12, OCTAL_MASK
   195 00000169 41BD03000000                mov r13, OCT_SHIFT
   196                                  
   197 0000016F E83B000000                  call ConverterSysMltplsTwo
   198                                  
   199 00000174 EB2C                        jmp .funcRet
   200                                  
   201                                  .string:
   202                                  
   203 00000176 E8F7000000                  call PutString
   204                                  
   205 0000017B EB25                        jmp .funcRet
   206                                  
   207                                  .error:
   208                                  
   209 0000017D 48BF-                       mov rdi, ERROR_MSG
   209 0000017F [5900000000000000] 
   210 00000187 41BF2D000000                mov r15, ERROR_MSG_SIZE
   211 0000018D E8FF000000                  call OutputBuffer
   212                                  
   213 00000192 EB0E                        jmp .funcRet
   214                                  
   215                                  .justLetter:
   216                                  
   217 00000194 E80A000000                  call CheckBuffer
   218                                  
   219 00000199 8A06                        mov al, byte [rsi]
   220 0000019B AA                          stosb
   221                                  
   222 0000019C 49FFC7                      inc r15
   223 0000019F 48FFC6                      inc rsi
   224                                  
   225                                  .funcRet:
   226                                  
   227 000001A2 C3                          ret
   228                                  
   229                                  ;===============================================================================================;
   230                                  ;-----------------------------------------------------------------------------------------------;
   231                                  ;                                                     CHECK_BUFFER                              ;
   232                                  ;Entry:     RDI - address in buffer             Check if size of var more                       ;
   233                                  ;           R15 - quantity of chars in buf            than buffer`s                             ;
   234                                  ;Retrn:     none                                                                                ;
   235                                  ;Destr:     none                                                                                ;
   236                                  ;===============================================================================================;
   237                                  
   238                                  CheckBuffer:
   239                                  
   240 000001A3 4983FF07                    cmp r15, BUFFER_SIZE - 1
   241                                  
   242 000001A7 7205                        jb .BufIsOk
   243                                  
   244 000001A9 E8E3000000                  call OutputBuffer
   245                                  
   246                                  .BufIsOk:
   247                                  
   248 000001AE C3                          ret
   249                                  
   250                                  ;I*********************************************************************************************I
   251                                  ;I                                       I             I                                       I
   252                                  ;I======================================= CONVERTATIONS =======================================I
   253                                  ;I                                       I             I                                       I
   254                                  ;I*********************************************************************************************I
   255                                  
   256                                  ;===============================================================================================;
   257                                  ;-----------------------------------------------------------------------------------------------;
   258                                  ;                                                 CONVERTER_SYS_MLTPLS_TWO                      ;
   259                                  ;Entry:     RDI - address in buffer             Put user`s multyples two num                    ;
   260                                  ;           R12 - MASK                                 into buffer                              ;
   261                                  ;           R13 - SHIFT                                                                         ;
   262                                  ;Retrn:     none                                                                                ;
   263                                  ;Destr:     RAX, RBX, RCX, RSI                                                                  ;
   264                                  ;===============================================================================================;
   265                                  
   266                                  ConverterSysMltplsTwo:
   267                                  
   268                                  ;-= Here the variabel is in RBX -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
   269                                  
   270 000001AF 488B1A                      mov rbx, [rdx]              ; put var in rbx
   271 000001B2 4883C208                    add rdx, MOV_TO_NEXT_VAR
   272                                  
   273                                  ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=
   274                                  
   275 000001B6 56                          push rsi                    ; save
   276 000001B7 52                          push rdx
   277                                  
   278 000001B8 488D3425[08000000]          lea rsi, INTERMDT_BUF
   279 000001C0 4887F7                      xchg rsi, rdi               ; for stosb
   280                                  
   281 000001C3 488D1425[49000000]          lea rdx, ALPHABET           ; for shift
   282                                  
   283 000001CB 4831C9                      xor rcx, rcx                ; reset to zero intermediate buffer counter
   284 000001CE 4987CD                      xchg rcx, r13               ; becouse we can`t shift (by shr) at r13
   285                                  
   286                                  .loop:
   287                                  
   288 000001D1 49FFC5                      inc r13
   289                                  
   290 000001D4 4889D8                      mov rax, rbx
   291                                  
   292 000001D7 4C21E0                      and rax, r12                ; mask
   293 000001DA 48D3EB                      shr rbx, cl                 ; shift
   294                                  
   295 000001DD 4801D0                      add rax, rdx                ; offset in alphabet
   296 000001E0 488B00                      mov rax, [rax]
   297                                  
   298 000001E3 AA                          stosb                       ; put alphabet`s char = rdx
   299                                  
   300 000001E4 4883FB00                    cmp rbx, 0
   301                                  
   302 000001E8 75E7                        jne .loop
   303                                  
   304 000001EA 48FFCF                      dec rdi
   305                                  
   306 000001ED 4C87E9                      xchg r13, rcx               ; was for shift
   307 000001F0 4887FE                      xchg rdi, rsi               ; was for stosw
   308                                  
   309 000001F3 E859000000                  call PutInBuf
   310                                  
   311 000001F8 5A                          pop rdx
   312 000001F9 5E                          pop rsi
   313                                  
   314 000001FA C3                          ret
   315                                  
   316                                  ;===============================================================================================
   317                                  ;-----------------------------------------------------------------------------------------------
   318                                  ;                                                           DECIMAL
   319                                  ;Entry:     RAX - numbet                            Put user`s decimal num
   320                                  ;           RDI - address in buffer                      into buffer
   321                                  ;           
   322                                  ;Retrn:
   323                                  ;Destr:     RAX, RBX, RCX
   324                                  ;===============================================================================================
   325                                  
   326                                  ConvertDecimal:
   327                                  
   328                                  ;-= Here the variabel is in RAX -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
   329                                  
   330 000001FB 488B02                      mov rax, [rdx]
   331 000001FE 4883C208                    add rdx, MOV_TO_NEXT_VAR
   332                                  
   333                                  ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=
   334                                  
   335 00000202 483D00000008                cmp rax, IS_NUM_NEG
   336                                  
   337 00000208 720D                        jb .positive
   338                                  
   339 0000020A 49FFC7                      inc r15
   340                                  
   341 0000020D C6072D                      mov byte [rdi], byte '-'
   342 00000210 48FFC7                      inc rdi
   343                                  
   344 00000213 F7D0                        not eax
   345 00000215 FFC0                        inc eax
   346                                  
   347                                  .positive:
   348                                  
   349 00000217 52                          push rdx                    ; save
   350 00000218 56                          push rsi
   351                                  
   352 00000219 488D3425[08000000]          lea rsi, INTERMDT_BUF       ; rsi - intermediate buffer
   353                                  
   354 00000221 4831C9                      xor rcx, rcx                ; xor counter of intermediate buffer chars
   355                                  
   356 00000224 41BE0A000000                mov r14, 10                 ; becouse we will div on it
   357                                  
   358                                  .loop:
   359                                  
   360 0000022A 48FFC1                      inc rcx
   361 0000022D 4831D2                      xor rdx, rdx                ; for div
   362                                  
   363 00000230 49F7F6                      div r14
   364                                  
   365 00000233 BB30000000                  mov rbx, '0'
   366 00000238 4801D3                      add rbx, rdx
   367                                  
   368 0000023B 881E                        mov byte [rsi], bl
   369 0000023D 48FFC6                      inc rsi
   370                                  
   371 00000240 4883F800                    cmp rax, 0
   372                                  
   373 00000244 75E4                        jne .loop
   374                                  
   375 00000246 48FFCE                      dec rsi
   376                                  
   377 00000249 E803000000                  call PutInBuf
   378                                  
   379 0000024E 5E                          pop rsi
   380 0000024F 5A                          pop rdx
   381                                  
   382 00000250 C3                          ret
   383                                  
   384                                  ;I*********************************************************************************************I
   385                                  ;I                                      I              I                                       I
   386                                  ;I=================================== END OF CONVERTATIONS ====================================I
   387                                  ;I                                      I              I                                       I
   388                                  ;I*********************************************************************************************I
   389                                  
   390                                  ;===============================================================================================
   391                                  ;-----------------------------------------------------------------------------------------------
   392                                  ;                                                            PUT_IN_BUF
   393                                  ;Entry:     RDI - address of buffer                 Put user`s string into buffer
   394                                  ;           RSI - address of last char in 
   395                                  ;                 intermadiate buffer
   396                                  ;           
   397                                  ;Retrn:
   398                                  ;Destr:     RCX
   399                                  ;===============================================================================================
   400                                  
   401                                  PutInBuf:
   402                                  
   403 00000251 4901CF                      add r15, rcx
   404                                  
   405 00000254 4983FF08                    cmp r15, BUFFER_SIZE
   406                                  
   407 00000258 720B                        jb .loop
   408                                  
   409 0000025A 4929CF                      sub r15, rcx
   410                                  
   411 0000025D E82F000000                  call OutputBuffer
   412                                  
   413 00000262 4901CF                      add r15, rcx
   414                                  
   415                                  .loop:
   416                                  
   417 00000265 A4                          movsb
   418                                      
   419 00000266 48FFCE                      dec rsi 
   420 00000269 48FFCE                      dec rsi
   421                                  
   422 0000026C E2F7                        loop .loop
   423                                      
   424 0000026E 48FFC6                      inc rsi
   425                                  
   426 00000271 C3                          ret
   427                                  
   428                                  ;===============================================================================================
   429                                  ;-----------------------------------------------------------------------------------------------
   430                                  ;                                                            PUT_STRING
   431                                  ;Entry:     RDX - var`s address                      Put user`s string into buffer
   432                                  ;                      
   433                                  ;Retrn:     none
   434                                  ;Destr:     RBX
   435                                  ;===============================================================================================
   436                                  
   437                                  PutString:
   438                                  
   439 00000272 56                          push rsi                    ; to save user`s string
   440                                  
   441                                  ;-= Here the variabel is in RSI -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
   442                                  
   443 00000273 488B32                      mov rsi, [rdx]
   444 00000276 4883C208                    add rdx, MOV_TO_NEXT_VAR
   445                                  
   446                                  ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=
   447                                  
   448                                  .loop:
   449                                  
   450                                      PUT_CHAR_INTO_BUFFER byte [rsi]
    46                              <1> 
    47 0000027A E824FFFFFF          <1>  call CheckBuffer
    48                              <1> 
    49 0000027F 8A06                <1>  mov al, %1
    50 00000281 AA                  <1>  stosb
    51                              <1> 
    52 00000282 49FFC7              <1>  inc r15
   451                                  
   452 00000285 48FFC6                      inc rsi
   453                                  
   454 00000288 8A1E                        mov bl, byte [rsi]
   455 0000028A 80FB00                      cmp bl, END_OF_STR
   456                                  
   457 0000028D 75EB                        jne .loop
   458                                  
   459 0000028F 5E                          pop rsi
   460                                  
   461 00000290 C3                          ret
   462                                  
   463                                  ;===============================================================================================
   464                                  ;-----------------------------------------------------------------------------------------------
   465                                  ;                                                          OUTPUT_BUFFER
   466                                  ;Entry:     RDI - address in buffer                 Put user`s string into buffer
   467                                  ;Retrn:     RDI - buffer address
   468                                  ;Destr:     RAX, RSI, RDI
   469                                  ;===============================================================================================
   470                                  
   471                                  OutputBuffer:
   472                                  
   473 00000291 52                          push rdx
   474 00000292 56                          push rsi
   475 00000293 51                          push rcx
   476                                  
   477 00000294 488D3425[00000000]          lea rsi, BUFFER
   478                                  
   479 0000029C B801000000                  mov rax, 1
   480 000002A1 BF01000000                  mov rdi, 1
   481 000002A6 4C89FA                      mov rdx, r15
   482 000002A9 0F05                        syscall
   483                                   
   484 000002AB 488D3C25[00000000]          lea rdi, BUFFER
   485 000002B3 41BF00000000                mov r15, 0
   486                                  
   487 000002B9 59                          pop rcx
   488 000002BA 5E                          pop rsi
   489 000002BB 5A                          pop rdx
   490                                  
   491 000002BC C3                          ret
